#!/bin/bash

# Enhanced dotfiles installation script
# This script creates symbolic links for all configuration files

set -e  # Exit on any error

path=$(pwd)
echo "Installing dotfiles from: $path"

# Function to create symbolic link with backup
create_link() {
    local src="$1"
    local dest="$2"
    
    # Create parent directory if it doesn't exist
    mkdir -p "$(dirname "$dest")"
    
    # Backup existing file/directory if it exists and isn't a symlink
    if [ -e "$dest" ] && [ ! -L "$dest" ]; then
        echo "Backing up existing $dest to ${dest}.backup"
        mv "$dest" "${dest}.backup"
    fi
    
    # Remove existing symlink if present
    [ -L "$dest" ] && rm "$dest"
    
    # Create the symbolic link
    ln -sf "$src" "$dest"
    echo "Linked: $src -> $dest"
}

# Function to create directory if it doesn't exist
ensure_dir() {
    [ ! -d "$1" ] && mkdir -p "$1"
}

echo "=== Installing Home Directory Dotfiles ==="

# Home directory configuration files
create_link "$path/.bash_profile" "$HOME/.bash_profile"
create_link "$path/.bashrc" "$HOME/.bashrc"
create_link "$path/.gitconfig" "$HOME/.gitconfig"
create_link "$path/.imwheelrc" "$HOME/.imwheelrc"
create_link "$path/.profile" "$HOME/.profile"
create_link "$path/config/nvim/init.vim" "$HOME/.vimrc"
create_link "$path/.Xresources" "$HOME/.Xresources"
create_link "$path/.xinitrc" "$HOME/.xinitrc"
create_link "$path/.Xmodmap" "$HOME/.Xmodmap"
create_link "$path/.zcompdump" "$HOME/.zcompdump"
create_link "$path/.zprofile" "$HOME/.zprofile"
create_link "$path/.zshenv" "$HOME/.zshenv"
create_link "$path/.zshrc" "$HOME/.zshrc"

echo "=== Installing Config Directory Files ==="

# Ensure .config directory exists
ensure_dir "$HOME/.config"

# GIMP configuration
ensure_dir "$HOME/.config/GIMP/2.10"
create_link "$path/config/GIMP/filters" "$HOME/.config/GIMP/2.10/filters"
create_link "$path/config/GIMP/patterns" "$HOME/.config/GIMP/2.10/patterns"

# Individual config files in subdirectories
ensure_dir "$HOME/.config/joplin"
create_link "$path/config/joplin/keymap.json" "$HOME/.config/joplin/keymap.json"

ensure_dir "$HOME/.config/nnn"
create_link "$path/config/nnn/plugins" "$HOME/.config/nnn/plugins"

ensure_dir "$HOME/.config/obs-studio"
create_link "$path/config/obs-studio/basic" "$HOME/.config/obs-studio/basic"

ensure_dir "$HOME/.config/transmission-daemon"
create_link "$path/config/transmission-daemon/settings.json" "$HOME/.config/transmission-daemon/settings.json"

ensure_dir "$HOME/.config/VSCodium/User"
create_link "$path/config/VSCodium/keybindings.json" "$HOME/.config/VSCodium/User/keybindings.json"
create_link "$path/config/VSCodium/settings.json" "$HOME/.config/VSCodium/User/settings.json"

# Full directory symlinks (remove existing directories first)
config_dirs=(
    "alacritty"
    "blender"
    "bookmenu"
    "broot"
    "bspwm"
    "btops"
    ".calcurse"
    "cfiles"
    "deadd"
    "Dharkael"
    "dunst"
    "gtk-2.0"
    "gtk-3.0"
    "hunter"
    "i3"
    "i3blocks"
    "import"
    "kitty"
    "lf"
    "mpv"
    "neofetch"
    "newsboat"
    "nvim"
    "pcmanfm"
    "pistol"
    "polybar"
    "powerline-shell"
    "ranger"
    "search"
    "shellconfig"
    "sxhkd"
    "tabdmenu"
    "transmission-rfss"
    "twmn"
    "vifm"
)

for dir in "${config_dirs[@]}"; do
    if [ -d "$path/config/$dir" ]; then
        create_link "$path/config/$dir" "$HOME/.config/$dir"
    else
        echo "Warning: $path/config/$dir does not exist, skipping..."
    fi
done

# Individual config files in .config root
config_files=(
    "compton.conf"
    "dolphinrc"
    "kdeglobals"
    "kdenliverc"
    "kiorc"
    "kservicemenurc"
    "ktrashrc"
    "mimeapps.list"
    "pavucontrol.ini"
    "starship.toml"
    "user-dirs.dirs"
    "wall.png"
)

for file in "${config_files[@]}"; do
    if [ -f "$path/config/$file" ]; then
        create_link "$path/config/$file" "$HOME/.config/$file"
    else
        echo "Warning: $path/config/$file does not exist, skipping..."
    fi
done

echo "=== Installing Local Directory Files ==="

# Local directory setup
ensure_dir "$HOME/.local/share"

if [ -d "$path/.local/share/applications" ]; then
    create_link "$path/.local/share/applications" "$HOME/.local/share/applications"
fi

if [ -d "$path/.local/share/fonts" ]; then
    create_link "$path/.local/share/fonts" "$HOME/.local/share/fonts"
    # Refresh font cache
    if command -v fc-cache >/dev/null 2>&1; then
        echo "Refreshing font cache..."
        fc-cache -fv
    fi
fi

echo "=== Installing System-wide Cron Configuration ==="

# System cron directory (requires sudo)
if [ -d "$path/cron" ]; then
    echo "Setting up system cron configuration (requires sudo)..."
    sudo mkdir -p /var/spool
    if [ -d /var/spool/cron ]; then
        sudo rm -rf /var/spool/cron
    fi
    sudo ln -sf "$path/cron" /var/spool/cron
    echo "Cron configuration linked successfully"
else
    echo "Warning: $path/cron directory not found, skipping system cron setup"
fi

echo "=== Post-installation Steps ==="

# Source shell configurations if they exist
if [ -f "$HOME/.bashrc" ]; then
    echo "To reload bash configuration, run: source ~/.bashrc"
fi

if [ -f "$HOME/.zshrc" ]; then
    echo "To reload zsh configuration, run: source ~/.zshrc"
fi

# Reload X resources if in X session
if [ -n "$DISPLAY" ] && command -v xrdb >/dev/null 2>&1; then
    echo "Reloading X resources..."
    xrdb -merge ~/.Xresources
fi

echo "=== Installation Complete ==="
echo "All dotfiles have been successfully installed!"
echo "Backup files (if any) are saved with .backup extension"
echo ""
echo "Next steps:"
echo "1. Restart your terminal or source your shell configuration"
echo "2. Log out and log back in to apply X11 configurations"
echo "3. Restart any applications that use the updated configurations"
